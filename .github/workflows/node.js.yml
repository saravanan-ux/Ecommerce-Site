name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16, 18]  # Add more Node.js versions to test

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - run: npm ci

    - run: npm run build --if-present

    - run: npm test
    - run: npm run lint  # Assuming you have a lint script
    - run: npm audit --production --audit-level=high



    # Docker steps to build and push to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build --cache-from=your-dockerhub-username/my-node-app:latest -t your-dockerhub-username/my-node-app:${{ github.sha }} .

    - name: Push Docker image to Docker Hub
      run: |
        docker push your-dockerhub-username/my-node-app:${{ github.sha }}

    # Optional: Tag the image with the "latest" tag
    - name: Tag and Push Latest Docker Image
      run: |
        docker tag your-dockerhub-username/my-node-app:${{ github.sha }} your-dockerhub-username/my-node-app:latest
        docker push your-dockerhub-username/my-node-app:latest
